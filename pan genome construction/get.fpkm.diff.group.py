import os
import sys
import argparse
import re
import numpy as np

parser=argparse.ArgumentParser(description='extract the expression data for given sample, and divided it into various groups')
parser.add_argument('-expression', type =argparse.FileType('r'),help='the general expression file')
parser.add_argument('-core', type =argparse.FileType('r'),help='the core group list')
parser.add_argument('-dispensable', type =argparse.FileType('r'),help='the dispensable group list')
parser.add_argument('-private', type =argparse.FileType('r'),help='the private group list')
parser.add_argument('-orthogroups', type =argparse.FileType('r'),help='the Orthogroups.tsv file generated by Othorfinder')
parser.add_argument('-outcore', type =argparse.FileType('w'),help='the core set output file')
parser.add_argument('-outdispensable', type =argparse.FileType('w'),help='the dispensable set output file')
parser.add_argument('-tag', type =str,help='the tag of geneID')
parser.add_argument('-outprivate', type =argparse.FileType('w'),help='the private set output file')     

args=parser.parse_args()

debug=True

dictc={}
dictd={}
dictp={}
for eachline in args.core:
	eachline=eachline.strip()
	dictc[eachline]=0
for eachline in args.dispensable:
	eachline=eachline.strip()
	dictd[eachline]=0
for eachline in args.private:
	eachline=eachline.strip()
	dictp[eachline]=0

dictc2={}
dictd2={}
dictp2={}
marker=args.tag
for eachline in args.orthogroups:
	eachline=eachline.strip()
	i=re.split('\t|,',eachline)
	for it in i:
		if marker not in it:
			continue
		else:
			it=it.split('.')[0]
			if i[0] in dictc:
				dictc2[it]=0
			elif i[0] in dictd:
				dictd2[it]=0
			elif i[0] in dictp:
				dictp2[it]=0
			else:
				print(it) #  check err information

for eachline in args.expression:
	eachline=eachline.strip()
	i=eachline.split()
	if i[0]=='geneID':
		continue
	else:
		lstout=[]
		for it in i:
			if it==i[0]:
				continue
			else:
				lstout.append(float(it))
		value=np.mean(lstout)
		if i[0] in dictc2:
			args.outcore.write(str(value)+'\n')
		elif i[0] in dictd2:
			args.outdispensable.write(str(value)+'\n')
		elif i[0] in dictp2:
			args.outprivate.write(str(value)+'\n')
		else:
			print(i[0]) # check err information




















